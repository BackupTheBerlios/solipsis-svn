# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4cvs on Wed May 25 15:48:27 2005

import wx

from solipsis.util.wxutils import _
from validators import *

# begin wxGlade: dependencies
# end wxGlade

class PreferencesDialog(wx.Dialog):
    def __init__(self, config_data, *args, **kwds):
        self.config_data = config_data

        # begin wxGlade: PreferencesDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook_prefs = wx.Notebook(self, -1, style=0)
        self.notebook_prefs_pane_2 = wx.Panel(self.notebook_prefs, -1)
        self.notebook_prefs_pane_1 = wx.Panel(self.notebook_prefs, -1)
        self.checkbox_multiple_identities = wx.CheckBox(self.notebook_prefs_pane_1, -1, _("Allow multiple identities"))
        self.checkbox_autokill = wx.CheckBox(self.notebook_prefs_pane_1, -1, _("Kill node when exiting"))
        self.label_proxy = wx.StaticText(self.notebook_prefs_pane_2, -1, _("If you want to connect to a remote node\ninstead of running a node on this computer,\nyou might have to adjust the HTTP proxy settings."))
        self.button_auto_proxy = wx.RadioButton(self.notebook_prefs_pane_2, -1, _("Automatic proxy detection"), style=wx.RB_GROUP)
        self.button_no_proxy = wx.RadioButton(self.notebook_prefs_pane_2, -1, _("No proxy"))
        self.button_manual_proxy = wx.RadioButton(self.notebook_prefs_pane_2, -1, _("Manual configuration"))
        self.label_proxy_host = wx.StaticText(self.notebook_prefs_pane_2, -1, _("Host: "))
        self.text_ctrl_proxy_host = wx.TextCtrl(self.notebook_prefs_pane_2, -1, "")
        self.label_proxy_port = wx.StaticText(self.notebook_prefs_pane_2, -1, _("Port: "))
        self.text_ctrl_proxy_port = wx.TextCtrl(self.notebook_prefs_pane_2, -1, "")
        self.button_close = wx.Button(self, wx.ID_CLOSE, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBUTTON, self.OnAutoProxy, self.button_auto_proxy)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnNoProxy, self.button_no_proxy)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnManualProxy, self.button_manual_proxy)
        self.Bind(wx.EVT_BUTTON, self.OnClose, id=wx.ID_CLOSE)
        # end wxGlade

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        # Set up validators
        _ref = self.config_data.Ref
        self.checkbox_autokill.SetValidator(BooleanValidator(_ref("node_autokill")))
        self.checkbox_multiple_identities.SetValidator(BooleanValidator(_ref("multiple_identities")))
        self.text_ctrl_proxy_host.SetValidator(HostnameValidator(_ref("proxy_host")))
        self.text_ctrl_proxy_port.SetValidator(PortValidator(_ref("proxy_port")))
        self.button_auto_proxy.SetValidator(BooleanValidator(_ref("proxymode_auto")))
        self.button_no_proxy.SetValidator(BooleanValidator(_ref("proxymode_none")))
        self.button_manual_proxy.SetValidator(BooleanValidator(_ref("proxymode_manual")))

        # Initialize UI values
        self.TransferDataToWindow()
        for page in self._GetPages():
            page.TransferDataToWindow()
        self._UpdateUI()

    def __set_properties(self):
        # begin wxGlade: PreferencesDialog.__set_properties
        self.SetTitle(_("Preferences"))
        self.checkbox_multiple_identities.SetToolTipString(_("Checking this box will allow to manage multiple identities from the connection box."))
        self.checkbox_autokill.SetToolTipString(_("Uncheck this box if you want to remain connected to the Solipsis world even when you exit the navigator."))
        self.button_close.SetDefault()
        # end wxGlade

        # BUG: this doesn't seem to work
        self.SetExtraStyle(self.GetExtraStyle() | wx.WS_EX_VALIDATE_RECURSIVELY)

    def __do_layout(self):
        # begin wxGlade: PreferencesDialog.__do_layout
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_13.Add(self.checkbox_multiple_identities, 0, wx.ALL, 3)
        sizer_13.Add(self.checkbox_autokill, 0, wx.ALL, 3)
        self.notebook_prefs_pane_1.SetAutoLayout(True)
        self.notebook_prefs_pane_1.SetSizer(sizer_13)
        sizer_13.Fit(self.notebook_prefs_pane_1)
        sizer_13.SetSizeHints(self.notebook_prefs_pane_1)
        sizer_14.Add(self.label_proxy, 0, wx.ALL, 3)
        sizer_14.Add(self.button_auto_proxy, 0, wx.ALL, 3)
        sizer_14.Add(self.button_no_proxy, 0, wx.ALL, 3)
        sizer_14.Add(self.button_manual_proxy, 0, wx.ALL, 3)
        sizer_15.Add((30, 5), 0, wx.ADJUST_MINSIZE, 0)
        sizer_15.Add(self.label_proxy_host, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_15.Add(self.text_ctrl_proxy_host, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_15.Add(self.label_proxy_port, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_15.Add(self.text_ctrl_proxy_port, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_14.Add(sizer_15, 0, wx.EXPAND, 0)
        self.notebook_prefs_pane_2.SetAutoLayout(True)
        self.notebook_prefs_pane_2.SetSizer(sizer_14)
        sizer_14.Fit(self.notebook_prefs_pane_2)
        sizer_14.SetSizeHints(self.notebook_prefs_pane_2)
        self.notebook_prefs.AddPage(self.notebook_prefs_pane_1, _("General"))
        self.notebook_prefs.AddPage(self.notebook_prefs_pane_2, _("Proxy"))
        sizer_12.Add(self.notebook_prefs, 1, wx.EXPAND, 0)
        sizer_12.Add(self.button_close, 0, wx.ALL|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 5)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_12)
        sizer_12.Fit(self)
        sizer_12.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    #
    # Event handlers
    #
    def OnClose(self, event): # wxGlade: PreferencesDialog.<event_handler>
        if self._Validate():
            self._Apply()
            self.EndModal(wx.ID_OK)

    def OnAutoProxy(self, event): # wxGlade: PreferencesDialog.<event_handler>
        self._UpdateUI()

    def OnNoProxy(self, event): # wxGlade: PreferencesDialog.<event_handler>
        self._UpdateUI()

    def OnManualProxy(self, event): # wxGlade: PreferencesDialog.<event_handler>
        self._UpdateUI()

    #
    # Private methods
    #
    def _GetPages(self):
        for i in range(self.notebook_prefs.GetPageCount()):
            yield self.notebook_prefs.GetPage(i)

    def _Validate(self):
        # We could in theory just set the wx.WS_EX_VALIDATE_RECURSIVELY flag,
        # but it is not available in wxGlade and seems buggy too...
        for page in self._GetPages():
            if not page.Validate():
                return False
        return self.Validate()

    def _UpdateUI(self):
        # Enable form fields depending on radio button values
        enable = self.button_manual_proxy.GetValue()
        self.text_ctrl_proxy_host.Enable(enable=enable)
        self.text_ctrl_proxy_port.Enable(enable=enable)

        # Adapt dialog size
        self.Layout()
        self.SetSize(self.GetBestVirtualSize())
    
    def _Apply(self):
        pass


# end of class PreferencesDialog
