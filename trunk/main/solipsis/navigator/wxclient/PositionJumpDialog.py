# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4cvs on Thu Jun 16 17:09:34 2005

import wx

from solipsis.util.wxutils import _
from validators import *

from jumpposition import JumpPosition

# begin wxGlade: dependencies
# end wxGlade

class PositionJumpDialog(wx.Dialog):
    def __init__(self, config_data, *args, **kwds):
        self.config_data = config_data
        self.jump_position = JumpPosition()

        # begin wxGlade: PositionJumpDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_jump = wx.StaticText(self, -1, _("Please enter the position to jump to:"))
        self.label_x = wx.StaticText(self, -1, _("X: "))
        self.text_ctrl_x = wx.TextCtrl(self, -1, "")
        self.label_y = wx.StaticText(self, -1, _("Y: "))
        self.text_ctrl_y = wx.TextCtrl(self, -1, "")
        self.button_ok = wx.Button(self, wx.ID_OK, "")
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnOk, id=wx.ID_OK)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id=wx.ID_CANCEL)
        # end wxGlade

        self.Bind(wx.EVT_CLOSE, self.OnCancel)

        # Set up validators
        _ref = self.jump_position.Ref
        self.text_ctrl_x.SetValidator(CoordValidator(_ref("x")))
        self.text_ctrl_y.SetValidator(CoordValidator(_ref("y")))

        # Initialize UI values
        self.TransferDataToWindow()
        self._UpdateUI()

    def __set_properties(self):
        # begin wxGlade: PositionJumpDialog.__set_properties
        self.SetTitle(_("Jump to absolute position"))
        self.text_ctrl_x.SetFocus()
        self.button_ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PositionJumpDialog.__do_layout
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add(self.label_jump, 0, wx.ALL, 3)
        sizer_18.Add(self.label_x, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_18.Add(self.text_ctrl_x, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_18.Add(self.label_y, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_18.Add(self.text_ctrl_y, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_16.Add(sizer_18, 0, 0, 0)
        sizer_17.Add(self.button_ok, 0, wx.ALL, 3)
        sizer_17.Add(self.button_cancel, 0, wx.ALL, 3)
        sizer_16.Add(sizer_17, 1, wx.ALIGN_RIGHT, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_16)
        sizer_16.Fit(self)
        sizer_16.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    #
    # Event handlers
    #
    def OnOk(self, event): # wxGlade: PositionJumpDialog.<event_handler>
        if self._Validate():
            self._Apply()
            self.EndModal(wx.ID_OK)

    def OnCancel(self, event): # wxGlade: PositionJumpDialog.<event_handler>
        self.EndModal(wx.ID_CANCEL)

    #
    # External API
    #
    def GetPosition(self):
        return (self.jump_position.x, self.jump_position.y)

    #
    # Private methods
    #
    def _Validate(self):
        return self.Validate()

    def _UpdateUI(self):
        # Adapt dialog size
        self.Layout()
        self.SetSize(self.GetBestVirtualSize())
    
    def _Apply(self):
        pass


# end of class PositionJumpDialog
