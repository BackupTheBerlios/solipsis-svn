#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4cvs on Tue Jun 21 10:17:16 2005
"""Application defined for testing purpose"""

import wx
import sys
import os.path
import optparse
import solipsis.services

from traceback import format_tb, format_list

from solipsis.util.wxutils import _
from solipsis.util.uiproxy import UIProxyReceiver
from solipsis.navigator.wxclient.config import ConfigData
from solipsis.services.wxcollector import WxServiceCollector
from solipsis.services.profile.facade import create_facade

class BaseGUI(wx.App, UIProxyReceiver):
    """Top-level class of GUI: application"""
    def __init__(self, options, *args):
        self.options = options
        self.options['App'] = self
        # needed by wxCollector
        self.main_window = None
        self.config_data = ConfigData()
        self.config_data.services_dir = os.path.dirname(solipsis.services.__file__)
        wx.App.__init__(self, *args)
        UIProxyReceiver.__init__(self)
        
    def OnInit(self):
        """overrides"""
        self.facade = create_facade(self.options['pseudo'])
        self.facade.load()
        # set up GUI
        wx.InitAllImageHandlers()
        collector = WxServiceCollector(self.config_data, 'localhost',
                                       self, None)
        name, self.plugin = collector.LoadService('', 'profile')
    
    def future_call(self, delay, function):
        """call function after delay (milli sec)"""
        wx.FutureCall(delay, function)

    def display_message(self, msg, title="Solipsis"):
        """Way of communicta with user"""
        dialog = wx.MessageDialog(None, msg, caption=title,
                                  style=wx.OK | wx.ICON_EXCLAMATION)
        dialog.ShowModal()

    def display_warning(self, msg, title="Solipsis"):
        """Way of communicta with user"""
        dialog = wx.MessageDialog(None, msg, caption=title,
                                  style=wx.OK | wx.ICON_WARNING)
        dialog.ShowModal()

    def display_error(self, msg, title="Solipsis", error=None, trace=None):
        """Way of communicta with user"""
        import  wx.lib.dialogs
        msg += "\n\n"
        if error != None:
            msg += "Please report the following error on berlios:\n" \
                   + str(error)+ "\n" \
                   + ''.join(format_tb(sys.exc_info()[2]))
            if hasattr(error, 'stack'):
                msg += "Exception caught here:\n" \
                       + ''.join(format_list(error.stack))
        elif trace != None:
            msg += ''.join(format_list(trace))
        else:
            msg += "No stack information\n"
        dialog = wx.lib.dialogs.ScrolledMessageDialog(None, msg,
                                                      caption=title,
                                                      size=(700,400))
        dialog.ShowModal()

    def display_status(self, msg):
        """report a status"""
        self.main_window.statusbar.SetStatusText(msg)

USAGE = "-p pseudo"

def get_options():
    """launch editor of profile"""
    parser = optparse.OptionParser(USAGE)
    parser.add_option("-p", "--pseudo", type="string",
                      action="store", dest="pseudo", default="manu",
                      help="pseudo to connect as")
    opt, args = parser.parse_args()
    # set options to be used in solipsis
    options = {}
    options['App'] = None
    options["standalone"] = True
    options['pseudo'] = opt.pseudo
    # launch gui
    return options
