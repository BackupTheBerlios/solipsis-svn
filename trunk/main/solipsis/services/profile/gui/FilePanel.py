# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.3.5.1 on Tue Mar 22 11:28:12 2005

import os, os.path
import wx, wx.gizmos
from os.path import isfile, isdir
from solipsis.services.profile.facade import get_facade
from solipsis.services.profile.data import SharingContainer

# begin wxGlade: dependencies
# end wxGlade        
    
class FilePanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FilePanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.actions_sizer_staticbox = wx.StaticBox(self, -1, _("Actions"))
        self.browse_button = wx.BitmapButton(self, -1, wx.Bitmap("/home/emb/svn/solipsis/trunk/main/solipsis/services/profile/images/browse.jpeg", wx.BITMAP_TYPE_ANY))
        self.add_button = wx.BitmapButton(self, -1, wx.Bitmap("/home/emb/svn/solipsis/trunk/main/solipsis/services/profile/images/add_file.jpeg", wx.BITMAP_TYPE_ANY))
        self.del_button = wx.BitmapButton(self, -1, wx.Bitmap("/home/emb/svn/solipsis/trunk/main/solipsis/services/profile/images/del_file.jpeg", wx.BITMAP_TYPE_ANY))
        self.tag_value = wx.TextCtrl(self, -1, "")
        self.tree_list = wx.gizmos.TreeListCtrl(self.window_1_pane_1, -1)
        self.dir_list = wx.ListCtrl(self.window_1_pane_2, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        isz = (16,16)
        il = wx.ImageList(isz[0], isz[1])
        self.fldridx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
        self.fldropenidx = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
        self.fileidx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_REPORT_VIEW, wx.ART_OTHER, isz))
        self.tree_list.SetImageList(il)
        self.dir_list.SetImageList(il, wx.IMAGE_LIST_SMALL)
        self.il = il

        # build tree list view
        self.tree_list.AddColumn(_("Explorer"))
        self.tree_list.AddColumn(_("# Shared"))
        self.tree_list.AddColumn(_("Path"))
        self.tree_list.SetMainColumn(0) # the one with the tree in it...
        self.tree_list.SetColumnWidth(0, 175)
        self.root = self.tree_list.AddRoot(_("File System..."))
        self.tree_data = SharingContainer()
        
        # build dir list view
        self.dir_list.InsertColumn(0, "Name")
        self.dir_list.InsertColumn(1, "Tag")
        self.dir_list.InsertColumn(2, "Shared", wx.LIST_FORMAT_RIGHT)

        # specific stuff
        self.facade = get_facade()
        self.bind_controls()
        self.file_state = SelectedFilelState()
        self.dir_state = SelectedDirState()
        self.current_state = FilePanelState()
        
    # EVENTS
    
    def bind_controls(self):
        """bind all controls with facade"""
        self.browse_button.Bind(wx.EVT_BUTTON, self.on_browse)
        self.add_button.Bind(wx.EVT_BUTTON, self.on_add)
        self.del_button.Bind(wx.EVT_BUTTON, self.on_del)
        self.tag_value.Bind(wx.EVT_KILL_FOCUS, self.on_tag)
        
        self.tree_list.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_select_tree)
        self.dir_list.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_select_dir)

    def on_browse(self, evt):
        """add shared directory to list"""
        dlg = wx.DirDialog(self, message=_("Choose your repository"),
            style=wx.DD_DEFAULT_STYLE|wx.DD_NEW_DIR_BUTTON)
        
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.facade.set_repository(path)
            
        dlg.Destroy()
        
    def on_add(self, evt):
        self.current_state.on_add(evt)
        
    def on_del(self, evt):
        self.current_state.on_del(evt)
        
    def on_tag(self, evt):
        self.current_state.on_tag(evt)

    def on_select_tree(self, evt):
        """new shared directory selecetd"""
        self.current_state = self.file_state
        self.current_state.on_select(evt)

    def on_select_dir(self, evt):
        """new shared directory selecetd"""
        self.current_state = self.dir_state
        self.current_state.on_select(evt)

    def expand_dir(self, full_path):
        """put into cache new information when dir expanded in tree"""
        self.facade.expand_dir(full_path)
            
    def _display_dir(self, dir_container):
        """format item in tree view"""
        # display info
        self.tree_list.SetItemImage(dir_container.item, self.fldridx, which = wx.TreeItemIcon_Normal)
        self.tree_list.SetItemImage(dir_container.item, self.fldropenidx, which = wx.TreeItemIcon_Expanded)
        self.tree_list.SetItemText(dir_container.item, dir_container.nb_shared, 1)
        self.tree_list.SetItemText(dir_container.item, dir_container.path, 2)

    def display_dir_content(self, full_path):
        """format item in tree view"""
        self.dir_list.ClearAll()
        file_content = self.tree_data.get_dir_content(full_path)
        for file_name, file_container in file_content.iteritems():
            #add to file list
            index = self.dir_list.InsertImageStringItem(sys.maxint, file_name, self.fileidx)
            self.dir_list.SetStringItem(index, 1, file_container.tag)
            self.dir_list.SetStringItem(index, 2, file_container.shared)
            self.dir_list.SetItemData(index, file_container)
            
    def __set_properties(self):
        # begin wxGlade: FilePanel.__set_properties
        self.browse_button.SetSize(self.browse_button.GetBestSize())
        self.add_button.SetSize(self.add_button.GetBestSize())
        self.del_button.SetSize(self.del_button.GetBestSize())
        self.tag_value.SetToolTipString(_("Complementary information on file"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FilePanel.__do_layout
        file_sizer = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        actions_sizer = wx.StaticBoxSizer(self.actions_sizer_staticbox, wx.HORIZONTAL)
        actions_sizer.Add(self.browse_button, 0, wx.FIXED_MINSIZE, 0)
        actions_sizer.Add(self.add_button, 0, wx.FIXED_MINSIZE, 0)
        actions_sizer.Add(self.del_button, 0, wx.FIXED_MINSIZE, 0)
        actions_sizer.Add(self.tag_value, 1, wx.LEFT|wx.EXPAND|wx.FIXED_MINSIZE, 3)
        file_sizer.Add(actions_sizer, 0, wx.ALL|wx.EXPAND, 3)
        sizer_1.Add(self.tree_list, 1, wx.ALL|wx.EXPAND, 3)
        self.window_1_pane_1.SetAutoLayout(True)
        self.window_1_pane_1.SetSizer(sizer_1)
        sizer_1.Fit(self.window_1_pane_1)
        sizer_1.SetSizeHints(self.window_1_pane_1)
        sizer_2.Add(self.dir_list, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetAutoLayout(True)
        self.window_1_pane_2.SetSizer(sizer_2)
        sizer_2.Fit(self.window_1_pane_2)
        sizer_2.SetSizeHints(self.window_1_pane_2)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        file_sizer.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(file_sizer)
        file_sizer.Fit(self)
        file_sizer.SetSizeHints(self)
        # end wxGlade

# end of class FilePanel


class FilePanelState:
    """Abstract class for states"""
    def on_add(self, evt):
        """share selected files or directory"""
        raise NotImplementedError("need a selection to share")
        
    def on_del(self, evt):
        """cancel sharing of selected files or directory"""
        raise NotImplementedError("need a selection to unshare")
        
    def on_tag(self, evt):
        """tag selected files or all directory"""
        raise NotImplementedError("need a selection to tag")
    
    def on_select(self, evt):
        """tag selected files or all directory"""
        raise NotImplementedError


class SelectedFilelState:
    """Abstract class for states"""
    def on_add(self, evt):
        """share selected files"""
        raise NotImplementedError("no selection")
        
    def on_del(self, evt):
        """cancel sharing of selected files"""
        raise NotImplementedError
        
    def on_tag(self, evt):
        """tag selected files"""
        raise NotImplementedError
    
    def on_select(self, evt):
        """acrtion on selection"""
        raise NotImplementedError


class SelectedDirState:
    """Abstract class for states"""
    def on_add(self, evt):
        """share directory"""
        raise NotImplementedError
        
    def on_del(self, evt):
        """cancel sharing of directory"""
        raise NotImplementedError
        
    def on_tag(self, evt):
        """tag selected all directory"""
        raise NotImplementedError
    
    def on_select(self, evt):
        """acrtion on selection"""
        raise NotImplementedError

