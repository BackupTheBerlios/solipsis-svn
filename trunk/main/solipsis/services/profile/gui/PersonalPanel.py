# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.3.5.1 on Tue Mar 22 11:28:12 2005

import os
import sys
import wx, wx.lib.editor

from StringIO import StringIO
from wx import ImageFromStream, BitmapFromImage

from solipsis.util.wxutils import _
from solipsis.services.profile.facade import get_facade
from solipsis.services.profile import QUESTION_MARK, ADD_CUSTOM, DEL_CUSTOM

# begin wxGlade: dependencies
# end wxGlade

class PersonalPanel(wx.Panel):
    def __init__(self, parent, id,
                 cb_modified=lambda x: sys.stdout.write(str(x))):
        # set members
        self.edited_item = None
        self.do_modified = cb_modified
        args = (parent, id)
        kwds = {}
        # begin wxGlade: PersonalPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.action_sizer_staticbox = wx.StaticBox(self, -1, _("Specify here a field of interest"))
        self.identity_sizer_staticbox = wx.StaticBox(self, -1, _("Identity"))
        self.title_value = wx.ComboBox(self, -1, choices=["", _("Mr"), _("Mrs"), _("Ms")], style=wx.CB_DROPDOWN|wx.CB_SIMPLE|wx.CB_READONLY)
        self.firstname_value = wx.TextCtrl(self, -1, _("First name"))
        self.lastname_value = wx.TextCtrl(self, -1, _("Last Name"))
        self.nickname_lbl = wx.StaticText(self, -1, _("Pseudo: "))
        self.nickname_value = wx.TextCtrl(self, -1, "")
        self.email_lbl = wx.StaticText(self, -1, _("E-mail: "))
        self.email_value = wx.TextCtrl(self, -1, "")
        self.photo_button = wx.BitmapButton(self, -1, wx.Bitmap(QUESTION_MARK(),wx.BITMAP_TYPE_ANY))
        self.key_value = wx.TextCtrl(self, -1, _("Favourite Book"))
        self.custom_value = wx.TextCtrl(self, -1, _("Harry Potter"))
        self.add_custom_button = wx.BitmapButton(self, -1, wx.Bitmap(ADD_CUSTOM(),wx.BITMAP_TYPE_ANY))
        self.del_custom_button = wx.BitmapButton(self, -1, wx.Bitmap(DEL_CUSTOM(),wx.BITMAP_TYPE_ANY))
        self.custom_list = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_SORT_ASCENDING|wx.NO_BORDER)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        self.il = wx.ImageList(16, 16)
        self.sm_up = self.il.Add(getSmallUpArrowBitmap())
        self.sm_dn = self.il.Add(getSmallDnArrowBitmap())
        self.custom_list.SetImageList(self.il, wx.IMAGE_LIST_SMALL)
        self.PopulateList()
        self.bind_controls()

    def PopulateList(self):
        self.custom_list.InsertColumn(0, _("MetaData"))
        self.custom_list.InsertColumn(1, _("Custom value"))
        self.custom_list.SetColumnWidth(0, 200)
        self.custom_list.SetColumnWidth(1, 200)

    # EVENTS
    
    def bind_controls(self):
        """bind all controls with facade"""
        # set modified on focus by default (usefull when closing frame)
        self.firstname_value.Bind(wx.EVT_SET_FOCUS, self.on_focus)
        self.lastname_value.Bind(wx.EVT_SET_FOCUS, self.on_focus)
        self.email_value.Bind(wx.EVT_SET_FOCUS, self.on_focus)
        # set value and check is really modified when losing focus
        self.title_value.Bind(wx.EVT_COMBOBOX, self.on_title)
        self.firstname_value.Bind(wx.EVT_KILL_FOCUS, self.on_firstname)
        self.lastname_value.Bind(wx.EVT_KILL_FOCUS, self.on_lastname)
        self.email_value.Bind(wx.EVT_KILL_FOCUS, self.on_email)
        self.photo_button.Bind(wx.EVT_BUTTON, self.on_photo)
        # custom list
        self.custom_list.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_selected)
        self.add_custom_button.Bind(wx.EVT_BUTTON, self.on_add)
        self.del_custom_button.Bind(wx.EVT_BUTTON, self.on_del)

    def on_focus(self, evt):
        self.do_modified(True)
        
    def on_title(self, evt):
        """language loses focus"""
        if get_facade().change_title(evt.GetString()) != False:
            self.do_modified(True)
        evt.Skip()
        
    def on_firstname(self, evt):
        """firstname loses focus"""
        if get_facade().change_firstname(evt.GetEventObject().GetValue()) != False:
            self.do_modified(True)
        evt.Skip()
        
    def on_lastname(self, evt):
        """lastname loses focus"""
        if get_facade().change_lastname(evt.GetEventObject().GetValue()) != False:
            self.do_modified(True)
        evt.Skip()
    
    def on_email(self, evt):
        """email loses focus"""
        if get_facade().change_email(evt.GetEventObject().GetValue()) != False:
            self.do_modified(True)
        evt.Skip()

    def on_photo(self, evt):
        """photo clicked"""
        dlg = wx.FileDialog(
            self, message=_("Choose your picture"),
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard= _("Image GIF (*.gif)|*.gif|" \
            "Image JPEG (*.jpg)|*.jpg|" \
            "Image PNG (*.png)|*.png|" \
            "All files (*.*)|*.*"),
            style=wx.OPEN | wx.CHANGE_DIR )
        
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            if get_facade().change_photo(path) != False:
                self.do_modified(True)
        dlg.Destroy()

    def on_selected(self, evt):
        """meta data"""
        self.edited_item = (evt.GetIndex(), evt.GetItem().GetText())
        self.key_value.SetValue(self.edited_item[1])
        self.custom_value.SetValue(self.custom_list.GetItem(evt.GetIndex(), 1).GetText())
        
    def on_add(self, evt):
        """a custom attribute has been modified"""
        # update cache, facade will refresh window (through GuiView)
        get_facade().add_custom_attributes(self.key_value.GetValue(),
                                           self.custom_value.GetValue())
        self.do_modified(True)

    def on_del(self, evt):
        """a custom attribute has been modified"""
        index = -1
        selected = []
        for counter in range(self.custom_list.GetSelectedItemCount()):
            index = self.custom_list.GetNextItem(index, state=wx.LIST_STATE_SELECTED)
            selected.append(index)
        # reverse deletion
        selected.sort()
        selected.reverse()
        for index in selected:
            item_text = self.custom_list.GetItemText(index)
            if self.custom_list.DeleteItem(index):
                # update cache
                get_facade().del_custom_attributes(item_text)
            self.do_modified(True)

    def on_change_facade(self):
        """setter"""
        self.nickname_value.SetValue(get_facade()._desc.document.get_pseudo())

    def __set_properties(self):
        # begin wxGlade: PersonalPanel.__set_properties
        self.title_value.SetSelection(0)
        self.nickname_value.SetToolTipString(_("How you appear to other peers"))
        self.nickname_value.Enable(False)
        self.photo_button.SetSize(self.photo_button.GetBestSize())
        self.add_custom_button.SetSize(self.add_custom_button.GetBestSize())
        self.del_custom_button.SetSize(self.del_custom_button.GetBestSize())
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PersonalPanel.__do_layout
        personal_sizer = wx.FlexGridSizer(1, 1, 0, 0)
        action_sizer = wx.StaticBoxSizer(self.action_sizer_staticbox, wx.HORIZONTAL)
        info_sizer = wx.FlexGridSizer(2, 2, 0, 0)
        identity_sizer = wx.StaticBoxSizer(self.identity_sizer_staticbox, wx.VERTICAL)
        contact_sizer = wx.FlexGridSizer(3, 2, 3, 0)
        name_sizer = wx.FlexGridSizer(1, 3, 3, 3)
        name_sizer.Add(self.title_value, 0, wx.FIXED_MINSIZE, 0)
        name_sizer.Add(self.firstname_value, 0, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        name_sizer.Add(self.lastname_value, 0, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        name_sizer.AddGrowableCol(1)
        name_sizer.AddGrowableCol(2)
        identity_sizer.Add(name_sizer, 0, wx.EXPAND, 0)
        contact_sizer.Add(self.nickname_lbl, 0, wx.FIXED_MINSIZE, 0)
        contact_sizer.Add(self.nickname_value, 0, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        contact_sizer.Add(self.email_lbl, 0, wx.FIXED_MINSIZE, 0)
        contact_sizer.Add(self.email_value, 0, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        contact_sizer.AddGrowableCol(1)
        identity_sizer.Add(contact_sizer, 0, wx.TOP|wx.EXPAND, 3)
        info_sizer.Add(identity_sizer, 0, wx.EXPAND, 0)
        info_sizer.Add(self.photo_button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.FIXED_MINSIZE, 3)
        info_sizer.AddGrowableCol(0)
        personal_sizer.Add(info_sizer, 0, wx.ALL|wx.EXPAND, 3)
        action_sizer.Add(self.key_value, 1, wx.ALL|wx.EXPAND|wx.FIXED_MINSIZE, 3)
        action_sizer.Add(self.custom_value, 1, wx.ALL|wx.EXPAND|wx.FIXED_MINSIZE, 3)
        action_sizer.Add(self.add_custom_button, 0, wx.LEFT|wx.FIXED_MINSIZE, 3)
        action_sizer.Add(self.del_custom_button, 0, wx.FIXED_MINSIZE, 0)
        personal_sizer.Add(action_sizer, 0, wx.ALL|wx.EXPAND|wx.ALIGN_RIGHT, 3)
        personal_sizer.Add(self.custom_list, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(personal_sizer)
        personal_sizer.Fit(self)
        personal_sizer.SetSizeHints(self)
        personal_sizer.AddGrowableRow(2)
        personal_sizer.AddGrowableCol(0)
        # end wxGlade

# end of class PersonalPanel

#----------------------------------------------------------------------
def getSmallUpArrowData():
    return \
'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\
\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\x08\x08\x08|\x08d\x88\x00\
\x00\x00<IDATx\x9ccddbf\xa0\x040Q\xa4{h\x18\xf0\xff\xdf\xdf\xffd\x1b\x00\xd3\
\x8c\xcf\x10\x9c\x06\xa0k\xc2e\x08m\xc2\x00\x97m\xd8\xc41\x0c \x14h\xe8\xf2\
\x8c\xa3)q\x10\x18\x00\x00R\xd8#\xec\x95{\xc4\x11\x00\x00\x00\x00IEND\xaeB`\
\x82' 

def getSmallUpArrowBitmap():
    return BitmapFromImage(getSmallUpArrowImage())

def getSmallUpArrowImage():
    stream = StringIO(getSmallUpArrowData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getSmallDnArrowData():
    return \
"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\
\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\x08\x08\x08|\x08d\x88\x00\
\x00\x00HIDATx\x9ccddbf\xa0\x040Q\xa4{\xd4\x00\x06\x06\x06\x06\x06\x16t\x81\
\xff\xff\xfe\xfe'\xa4\x89\x91\x89\x99\x11\xa7\x0b\x90%\ti\xc6j\x00>C\xb0\x89\
\xd3.\x10\xd1m\xc3\xe5*\xbc.\x80i\xc2\x17.\x8c\xa3y\x81\x01\x00\xa1\x0e\x04e\
\x1d\xc4;\xb7\x00\x00\x00\x00IEND\xaeB`\x82" 

def getSmallDnArrowBitmap():
    return BitmapFromImage(getSmallDnArrowImage())

def getSmallDnArrowImage():
    stream = StringIO(getSmallDnArrowData())
    return ImageFromStream(stream)



